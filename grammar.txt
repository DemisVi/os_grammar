for (var i = 3, i > 0, i--)
[
    var variable = 'string'
    const constant = 'value'
    var number = 2, number2 = 2
    var res

    print('text')
    print(number + number2)
]

meth print(value)
[
    log(value)
]

//=============================================================================

token : keyword
      | identifier
      | literal
      | operator
      ;

declaration : variable_declaration
            | constant_declaration
            | method_declaration
            ;

block : '[' statement_list?  ']'
      | block
      ;

variable_declaration : 'var' identifier
                     | 'var' identifier assignment_operator expression
                     ;

constant_declaration : 'const' identifier assignment_operator expression ;

method_declaration : 'meth' identifier '(' parameters ')' ;

parameters : literal_list

literal_list : literal ('\s' literal_list)* ;

assignment_expression : identifier assignment_operator expression ;

identifier : [a-zA-Z]+[a-zA-Z0-9_]* ;

keyword : 'var' | 'const' | 'for' | 'if' | 'else' | 'pass' | 'log' | 'true' | 'false' | 'null'
        | 'date' | 'time' | 'is' | ;

operator : assignment_operator
         | binary_operator
         | unary_operator
         | boolean_operator
         ;

unary_operator : '-' | '+' | '~' | '--' | '++'

binary_operator : '-' | '+' | '*' | '/' | '%'

assignment_operator : '=' | '-=' | '+=' | '*=' | '/='

boolean_operator : '>' | '<' | '>=' | '<=' | '==' | '~=' | '&' | '|'

literal : integer_literal
        | character_literal
        | string_literal
        ;

integer_literal : \d+[\d_]* ;

character_literal : '\'' \w{1} '\'' ;

string_literal : '\'' \w+ '\'' ;

new_line_character : '\n' | '\r' | '\f'

expression : assignment_expression
           | non_assignment_expression
           ;

assignment_expression : identifier (assignment_operator expression)+ ;

non_assignment_expression : literal
                          | identifier
                          | unary_expression
                          | binary_expression
                          | boolean_expression
                          | invocation_expression
                          ;

unary_expression : unary_operator expression ;

binary_expression : expression binary_operator (expression | binary_expression)+ ;

boolean_expression : expression boolean_operator (expression | boolean_expression)+ ;

invocation_expression : identifier '(' arguments? ')' ;

arguments : expression (',' expression)*

statement : declaration_statement
          | empty_statement
          | loop_statement
          | if_statement
          | invocation_statement
          | block
          ;

empty_statement : new_line_character+ ;

statement_list : statement+ ;

declaration_statement : variable_declaration new_line_character
                      | constant_declaration new_line_character
                      | method_declaration block new_line_character
                      ;

loop_statement : 'for' loop_condition block new_line_character

    loop_condition : '(' variable_declaration* ',' boolean_expression* ',' expression* ')'

if_statement : 'if' if_condition block new_line_character

    if_condition : '(' boolean_expression ')'

invocation_statement : invocation_expression new_line_character

program : block
